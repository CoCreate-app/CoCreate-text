(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["text"] = factory();
	else
		root["CoCreate"] = root["CoCreate"] || {}, root["CoCreate"]["text"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../CoCreate-components/CoCreate-text/src/CoCreate-text.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../CoCreate-components/CoCreate-text/src/CoCreate-text.js":
/*!*****************************************************************!*\
  !*** ../CoCreate-components/CoCreate-text/src/CoCreate-text.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\nvar CoCreateText = {\n  elements: [],\n  init: function init() {\n    this.initElement(document); // this.initSockets();\n  },\n  refreshElement: function refreshElement(mutation) {\n    var element = mutation.target;\n    if (!element) return;\n    var tagName = element.tagName.toLowerCase();\n\n    if (!['input', 'textarea'].includes(tagName) || !element.getAttribute('data-document_id') || !element.getAttribute('name')) {\n      return;\n    }\n\n    if (!CoCreateObserver.isUsageY(element)) return;\n\n    if (!CoCreate.observer.getInitialized(element, 'text')) {\n      this.__initEvents(element);\n    }\n\n    CoCreate.observer.setInitialized(element, 'text');\n\n    if (CoCreate.document_id.checkID(element)) {\n      // element.value = \"\";\n      this.createYDoc(element, true);\n    }\n  },\n  initElement: function initElement(container) {\n    var self = this;\n    var fetch_container = container || document;\n    var elements = fetch_container.querySelectorAll('input[data-document_id][name], textarea[data-document_id][name]');\n\n    if (elements.length == 0 && fetch_container != document && fetch_container.hasAttribute('data-document_id') && fetch_container.hasAttribute('name')) {\n      elements = [fetch_container];\n    }\n\n    elements.forEach(function (element) {\n      if (!CoCreateInput.isUsageY(element)) {\n        return;\n      }\n\n      if (self.checkExistElement(element)) {\n        // this.setInitValue(elements[i])\n        return;\n      }\n\n      if (CoCreate.observer.getInitialized(element, 'text')) {\n        return;\n      }\n\n      CoCreate.observer.setInitialized(element, 'text');\n\n      self.__initEvents(element);\n\n      if (CoCreate.document_id.checkID(element)) {\n        self.createYDoc(element);\n      } else {\n        //. register create document_id event\n        element.addEventListener('set-document_id', function (event) {\n          var el = this;\n          var text_str = el.value;\n          self.createYDoc(el);\n          self.sendChangeData(el, text_str, 0, text_str.length);\n        });\n      }\n    });\n  },\n  checkExistElement: function checkExistElement(element) {\n    for (var i = 0; i < this.elements.length; i++) {\n      if (this.elements[i].isSameNode(element)) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  setInitValue: function setInitValue(element) {\n    var typeId = this.generateTypeName(element);\n    var value = CoCreate.crdt.getWholeString(typeId);\n    element.value = value; // CoCreateInput.setValue(element, value);\n  },\n  createYDoc: function createYDoc(element, isExclude) {\n    var collection = element.getAttribute('data-collection');\n    var document_id = element.getAttribute('data-document_id');\n    var name = element.getAttribute('name');\n    var status = CoCreate.crdt.init({\n      collection: collection,\n      document_id: document_id,\n      name: name,\n      element: element\n    });\n\n    if (!isExclude) {\n      this.elements.push(element);\n    } else {\n      element.value = CoCreate.crdt.get({\n        collection: collection,\n        document_id: document_id,\n        name: name\n      }); // CoCreateInput.setValue(element, CoCreate.crdt.get({collection, document_id, name }));\n    }\n  },\n  __initEvents: function __initEvents(input_element) {\n    //. selection event\n    var self = this;\n    input_element.addEventListener('select', function () {\n      if (this.selectionEnd !== this.selectionStart) {\n        self.setSelectionInfo(this, true, this.selectionStart, this.selectionEnd);\n        if (document.activeElement === this) self.sendPosition(this);\n      }\n    });\n    input_element.addEventListener('keyup', function (event) {\n      var arrows = [37, 38, 39, 40];\n\n      if (arrows.indexOf(event.keyCode) != -1) {\n        self.sendPosition(this);\n      }\n    });\n    input_element.addEventListener('keydown', function (event) {\n      var arrows = [37, 38, 39, 40];\n\n      if (arrows.indexOf(event.keyCode) != -1) {\n        //console.log(\"keydown ---- \")\n        self.sendPosition(this);\n      }\n    });\n    input_element.addEventListener('click', function (event) {\n      if (document.activeElement === this) self.sendPosition(this);\n    });\n    input_element.addEventListener('blur', function (event) {\n      var id = self.generateTypeName(this);\n      CoCreate.crdt.setCursorNull(id);\n    });\n    input_element.addEventListener('input', function (event) {\n      var nowstart = this.selectionStart - 1;\n      var nowend = nowstart;\n      var selection_info = self.getSelectionInfo(this);\n      var content_text = \"\";\n      var isUpdate = false;\n\n      switch (event.inputType) {\n        case 'deleteContentBackward':\n          isUpdate = true;\n          nowstart++;\n          nowend = nowstart + 1;\n          break;\n\n        case 'deleteContentForward':\n          isUpdate = true;\n          nowstart++;\n          nowend = nowstart + 1;\n          break;\n\n        case 'insertLineBreak':\n          isUpdate = true;\n          content_text = \"\\n\";\n          nowend++;\n          break;\n\n        case 'insertText':\n          isUpdate = true;\n          content_text = event.data || \"\\n\";\n          break;\n\n        case 'deleteByCut':\n          isUpdate = true;\n          break;\n      }\n\n      if (isUpdate) {\n        if (selection_info.is_selected) {\n          //. delete event\n          var character_deleted = selection_info.start - selection_info.end; //CoCreateCursors.recalculate_local_cursors(this,character_deleted)\n\n          self.sendChangeData(this, \"\", selection_info.start, selection_info.end);\n\n          if (content_text.length > 0) {\n            self.sendChangeData(this, content_text, nowstart, nowend);\n          }\n\n          self.setSelectionInfo(this, false, this.selectionStart, this.selectionStart);\n        } else {\n          self.sendChangeData(this, content_text, nowstart, nowend);\n        }\n      }\n    });\n    /** unselect events **/\n\n    input_element.addEventListener('blur', function (e) {\n      self.setSelectionInfo(this, false, this.selectionStart, this.selectionStart);\n    });\n    input_element.addEventListener('click', function (e) {\n      self.setSelectionInfo(this, false, this.selectionStart, this.selectionStart);\n    });\n    /** past events **/\n\n    input_element.addEventListener('paste', function (event) {\n      var content_text = event.clipboardData.getData('Text');\n      var start = this.selectionStart;\n      var end = this.selectionEnd; //. send delete event\n\n      if (start != end) {\n        this.setSelectionRange(end, end);\n        self.sendChangeData(this, \"\", start, end, false);\n      }\n\n      if (start == end) {// to calculate Cursors in collaboration \n        // CoCreateCursors.recalculate_local_cursors(this,content_text.length)\n      } //. insert event\n\n\n      self.sendChangeData(this, content_text, start, start, false);\n      event.preventDefault();\n    });\n    input_element.addEventListener('cocreate-y-update', function (event) {\n      var _this = this;\n\n      var info = event.detail;\n      input_element.crudSetted = true;\n      var pos = 0;\n      var flag = true;\n      info.forEach(function (item) {\n        if (item.retain) {\n          flag = true;\n          pos = item.retain;\n        }\n\n        if (item.insert || item[\"delete\"]) {\n          if (flag == false) pos = 0;\n          flag = false;\n\n          if (item.insert) {\n            //. insert process\n            self.updateChangeData(_this, item.insert, pos, pos);\n          } else if (item[\"delete\"]) {\n            //. delete process\n            self.updateChangeData(_this, \"\", pos, pos + item[\"delete\"]);\n          }\n        }\n      });\n    });\n  },\n  setSelectionInfo: function setSelectionInfo(e, isSelect, start, end) {\n    e.setAttribute(\"is_selected\", isSelect);\n    e.setAttribute(\"selection_start\", start);\n    e.setAttribute(\"selection_end\", end); //console.log(\"swelect\",e)\n\n    this.sendPosition(e);\n  },\n  getSelectionInfo: function getSelectionInfo(e) {\n    return {\n      is_selected: e.getAttribute(\"is_selected\") === 'true' ? true : false,\n      start: parseInt(e.getAttribute(\"selection_start\")),\n      end: parseInt(e.getAttribute(\"selection_end\"))\n    };\n  },\n  checkDocumentID: function checkDocumentID(element) {\n    var document_id = element.getAttribute('data-document_id');\n\n    if (!document_id || document_id === \"\") {\n      return false;\n    }\n\n    return true;\n  },\n  sendChangeData: function sendChangeData(element, content, start, end) {\n    var isRemove = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n    if (!this.checkDocumentID(element)) {\n      CoCreate.document_id.request({\n        element: element,\n        nameAttr: \"name\"\n      });\n      element.setAttribute('data-document_id', 'pending');\n      return;\n    }\n\n    if (element.getAttribute('data-document_id') == 'pending') {\n      return;\n    }\n\n    var collection = element.getAttribute('data-collection'),\n        document_id = element.getAttribute('data-document_id'),\n        name = element.getAttribute('name');\n\n    if (element.getAttribute('data-save_value') == 'false') {\n      return;\n    } //console.log(\"SendChangeDataFrom Cocreate-Text\")\n\n\n    var character_count = content.length > 0 ? content.length : -1;\n    CoCreateCursors.recalculate_local_cursors(element, character_count); //send position when keyUp \n\n    this.sendPosition(element);\n\n    if (content.length > 0) {\n      if (isRemove) {\n        element.setRangeText(\"\", start, start + content.length, \"start\");\n      }\n\n      CoCreate.crdt.insert({\n        collection: collection,\n        document_id: document_id,\n        name: name,\n        value: content,\n        position: start\n      });\n    } else {\n      if (isRemove) element.setRangeText(\" \".repeat(end - start), start, start, \"end\");\n      CoCreate.crdt[\"delete\"]({\n        collection: collection,\n        document_id: document_id,\n        name: name,\n        position: start,\n        length: end - start\n      });\n    }\n\n    if (document.activeElement === element) {\n      this.setSelectionInfo(element, false, element.selectionStart, element.selectionStart);\n      this.sendPosition(element);\n    }\n  },\n  updateChangeData: function updateChangeData(element, content, start, end) {\n    var prev_start = element.selectionStart;\n    var prev_end = element.selectionEnd;\n    element.setRangeText(content, start, end, \"end\");\n\n    if (prev_start >= start) {\n      if (content == \"\") {\n        prev_start -= end - start;\n        prev_end -= end - start;\n        prev_start = prev_start < start ? start : prev_start;\n      } else {\n        prev_start += content.length;\n        prev_end += content.length;\n      }\n    }\n\n    {\n      if (content == \"\" && prev_end >= start) {\n        prev_end = prev_end >= end ? prev_end - (end - start) : start;\n      }\n    }\n    element.selectionStart = prev_start;\n    element.selectionEnd = prev_end;\n    var isFocused = document.activeElement === element;\n    CoCreateCursors.refresh_mirror(element);\n\n    if (CoCreateFloatingLabel) {\n      CoCreateFloatingLabel.update(element, element.value);\n    }\n  },\n  generateTypeName: function generateTypeName(element) {\n    var collection = element.getAttribute('data-collection');\n    var document_id = element.getAttribute('data-document_id');\n    var name = element.getAttribute('name');\n    return CoCreate.crdt.generateID(config.organization_Id, collection, document_id, name);\n  },\n  setText: function setText(element_id, info) {\n    var _this2 = this;\n\n    var pos = 0;\n    var flag = true;\n    info.forEach(function (item) {\n      if (item.retain) {\n        flag = true;\n        pos = item.retain;\n      }\n\n      if (item.insert || item[\"delete\"]) {\n        if (flag == false) pos = 0;\n        flag = false;\n\n        if (item.insert) {\n          //. insert process\n          _this2.receiveChangeData(element_id, item.insert, pos, pos);\n        } else if (item[\"delete\"]) {\n          //. delete process\n          _this2.receiveChangeData(element_id, \"\", pos, pos + item[\"delete\"]);\n        }\n      }\n    });\n  },\n  isAvaiableEl: function isAvaiableEl(element) {\n    //console.log(this.elements)\n    for (var i = 0; i < this.elements.length; i++) {\n      console.log(this.elements[i].isEqualNode(element), element);\n\n      if (this.elements[i].isEqualNode(element) === true) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  sendPosition: function sendPosition(element) {\n    //console.log(\"Se envio \")\n\n    /*if (!this.isAvaiableEl(element)) {\n      return;\n    }*/\n    var id = this.generateTypeName(element); //console.log(\" SEnd Position Selector ID \",id)\n    //console.log(element.selectionStart, element.selectionEnd);\n\n    var from = element.selectionStart;\n    var to = element.selectionEnd; //console.log(\"Se envio la position \",id,from, to)\n\n    CoCreate.crdt.setPositionYJS(id, from, to);\n  }\n};\nCoCreateText.init(); // CoCreateInit.register('CoCreateText', CoCreateText, CoCreateText.initElement);\n\nCoCreate.observer.add({\n  name: 'CoCreateTextCreate',\n  observe: ['subtree', 'childList'],\n  include: '[data-collection][data-document_id][name]',\n  callback: function callback(mutation) {\n    console.log('cocreate-text init');\n    CoCreateText.initElement(mutation.target);\n  }\n});\nCoCreate.observer.add({\n  name: 'CoCreateTextNameObserver',\n  observe: ['attributes'],\n  attributes: ['name'],\n  callback: function callback(mutation) {\n    console.log('change cocreate-text name');\n    CoCreateText.refreshElement(mutation);\n  }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (CoCreateText);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-text/src/CoCreate-text.js\n");

/***/ })

/******/ })["default"];
});